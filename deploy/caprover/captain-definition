{
  "schemaVersion": 2,
  "dockerfileLines": [
    "FROM node:20-alpine AS frontend-deps",
    "RUN corepack enable && corepack prepare pnpm@latest --activate",
    "WORKDIR /app/frontend",
    "COPY frontend/package.json frontend/pnpm-lock.yaml ./",
    "RUN pnpm install --frozen-lockfile",
    "",
    "FROM node:20-alpine AS frontend-builder",
    "ARG NEXT_PUBLIC_BACKEND_URL=http://localhost:8080",
    "ARG NODE_ENV=production",
    "RUN corepack enable && corepack prepare pnpm@latest --activate",
    "WORKDIR /app/frontend",
    "COPY --from=frontend-deps /app/frontend/node_modules ./node_modules",
    "COPY frontend/ ./",
    "ENV NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL",
    "ENV NODE_ENV=$NODE_ENV",
    "RUN pnpm run build",
    "",
    "FROM golang:1.25-alpine AS backend-builder",
    "RUN apk add --no-cache git",
    "WORKDIR /app/backend",
    "COPY backend/go.mod backend/go.sum ./",
    "RUN go mod download",
    "COPY backend/ ./",
    "RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o server ./cmd/server",
    "",
    "FROM alpine:latest",
    "ARG DB_HOST",
    "ARG DB_PORT=5432",
    "ARG DB_NAME",
    "ARG DB_USER",
    "ARG DB_PASSWORD",
    "ARG API_PORT=8080",
    "ARG GOOGLE_API_KEY",
    "ARG AI_PROVIDER=google",
    "ARG AI_MODEL=gemini-2.5-flash",
    "ARG AI_MAX_TOKENS=4000",
    "ARG AI_TEMPERATURE=0.7",
    "ARG NEXT_PUBLIC_BACKEND_URL=http://localhost:8080",
    "ARG NODE_ENV=production",
    "",
    "ENV DB_HOST=$DB_HOST",
    "ENV DB_PORT=$DB_PORT",
    "ENV DB_NAME=$DB_NAME",
    "ENV DB_USER=$DB_USER",
    "ENV DB_PASSWORD=$DB_PASSWORD",
    "ENV API_PORT=$API_PORT",
    "ENV GOOGLE_API_KEY=$GOOGLE_API_KEY",
    "ENV AI_PROVIDER=$AI_PROVIDER",
    "ENV AI_MODEL=$AI_MODEL",
    "ENV AI_MAX_TOKENS=$AI_MAX_TOKENS",
    "ENV AI_TEMPERATURE=$AI_TEMPERATURE",
    "ENV NEXT_PUBLIC_BACKEND_URL=$NEXT_PUBLIC_BACKEND_URL",
    "ENV NODE_ENV=$NODE_ENV",
    "",
    "RUN apk --no-cache add ca-certificates nodejs npm nginx supervisor",
    "WORKDIR /app",
    "",
    "COPY --from=backend-builder /app/backend/server ./backend/",
    "COPY --from=frontend-builder /app/frontend/.next/standalone ./frontend/",
    "COPY --from=frontend-builder /app/frontend/.next/static ./frontend/.next/static",
    "COPY --from=frontend-builder /app/frontend/public ./frontend/public",
    "",
    "RUN mkdir -p /run/nginx /var/log/nginx /var/log/supervisor",
    "",
    "COPY deploy/caprover/nginx.conf /etc/nginx/nginx.conf",
    "",
    "RUN echo '[supervisord]' > /etc/supervisord.conf && \\",
    "    echo 'nodaemon=true' >> /etc/supervisord.conf && \\",
    "    echo 'user=root' >> /etc/supervisord.conf && \\",
    "    echo 'logfile=/var/log/supervisor/supervisord.log' >> /etc/supervisord.conf && \\",
    "    echo 'pidfile=/var/run/supervisord.pid' >> /etc/supervisord.conf && \\",
    "    echo '' >> /etc/supervisord.conf && \\",
    "    echo '[program:backend]' >> /etc/supervisord.conf && \\",
    "    echo 'command=/app/backend/server' >> /etc/supervisord.conf && \\",
    "    echo 'directory=/app/backend' >> /etc/supervisord.conf && \\",
    "    echo 'autostart=true' >> /etc/supervisord.conf && \\",
    "    echo 'autorestart=true' >> /etc/supervisord.conf && \\",
    "    echo 'stdout_logfile=/dev/stdout' >> /etc/supervisord.conf && \\",
    "    echo 'stdout_logfile_maxbytes=0' >> /etc/supervisord.conf && \\",
    "    echo 'stderr_logfile=/dev/stderr' >> /etc/supervisord.conf && \\",
    "    echo 'stderr_logfile_maxbytes=0' >> /etc/supervisord.conf && \\",
    "    echo '' >> /etc/supervisord.conf && \\",
    "    echo '[program:frontend]' >> /etc/supervisord.conf && \\",
    "    echo 'command=node server.js' >> /etc/supervisord.conf && \\",
    "    echo 'directory=/app/frontend' >> /etc/supervisord.conf && \\",
    "    echo 'autostart=true' >> /etc/supervisord.conf && \\",
    "    echo 'autorestart=true' >> /etc/supervisord.conf && \\",
    "    echo 'stdout_logfile=/dev/stdout' >> /etc/supervisord.conf && \\",
    "    echo 'stdout_logfile_maxbytes=0' >> /etc/supervisord.conf && \\",
    "    echo 'stderr_logfile=/dev/stderr' >> /etc/supervisord.conf && \\",
    "    echo 'stderr_logfile_maxbytes=0' >> /etc/supervisord.conf && \\",
    "    echo '' >> /etc/supervisord.conf && \\",
    "    echo '[program:nginx]' >> /etc/supervisord.conf && \\",
    "    echo 'command=nginx -g \"daemon off;\"' >> /etc/supervisord.conf && \\",
    "    echo 'autostart=true' >> /etc/supervisord.conf && \\",
    "    echo 'autorestart=true' >> /etc/supervisord.conf && \\",
    "    echo 'stdout_logfile=/dev/stdout' >> /etc/supervisord.conf && \\",
    "    echo 'stdout_logfile_maxbytes=0' >> /etc/supervisord.conf && \\",
    "    echo 'stderr_logfile=/dev/stderr' >> /etc/supervisord.conf && \\",
    "    echo 'stderr_logfile_maxbytes=0' >> /etc/supervisord.conf",
    "",
    "EXPOSE 80",
    "CMD [\"supervisord\", \"-c\", \"/etc/supervisord.conf\"]"
  ]
}
